{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "da81160c-1ce7-4da0-a6aa-0bb0b803e243",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Project: FRED Data Analysis and Storage in PostgreSQL\n",
    "This project involves fetching economic data from the FRED (Federal Reserve Economic Data) API, processing it, storing it in a PostgreSQL database, and then doing a time series analysis. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8f5c9a5-8dd0-496f-b32e-d6b8ea52565f",
   "metadata": {},
   "source": [
    "## I want to gain experience using Arima and Prophet models and I also want to create a full scale project\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e6e5adb-da9d-4348-a0f2-af849d01e3b8",
   "metadata": {},
   "source": [
    "# 1. Fetching Data from FRED API\n",
    "Description\n",
    "In this section, we define a function to search for economic data series in the FRED API based on specific search terms. The function filters the results to include only US-related series and returns a list of series names and IDs.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8d902dd6-29c8-4f96-b575-be33b3ddf561",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fetching data for: Exports of Goods and Services\n",
      "Fetching data for: Imports of Goods and Services\n",
      "Fetching data for: Net Exports (Exports - Imports)\n",
      "Fetching data for: Current Account Balance\n",
      "Fetching data for: Capital Account Balance\n",
      "Fetching data for: Financial Account Balance\n",
      "Fetching data for: Foreign Direct Investment (FDI)\n",
      "Fetching data for: Portfolio Investment\n",
      "Fetching data for: Reserve Assets\n",
      "Fetching data for: Trade Balance\n",
      "\n",
      "Series for: Portfolio Investment\n",
      "Series Name: US Acquisition of Portfolio Investment Assets, Series ID: IEAAPI\n",
      "Series Name: US Acquisition of Portfolio Investment Assets, Series ID: IEAAPIA\n",
      "Series Name: US Acquisition of Portfolio Investment Assets, Series ID: IEAAPIN\n",
      "Series Name: AD&Co US Mortgage High Yield Index, Credit-and-Option-Adjusted Spread: Mid-Tier, Series ID: CROASMIDTIER\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities: Equity and investment fund shares, Series ID: IEAIPIE\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities: Equity and investment fund shares, Series ID: IEAIPIEN\n",
      "Series Name: US Acquisition of Portfolio Investment Assets: Equity and investment fund shares, Series ID: IEAAPIE\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities: Equity and investment fund shares, Series ID: IEAIPIEA\n",
      "Series Name: US Acquisition of Portfolio Investment Assets: Equity and investment fund shares, Series ID: IEAAPIEA\n",
      "Series Name: US Acquisition of Portfolio Investment Assets: Equity and investment fund shares, Series ID: IEAAPIEN\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities, Series ID: IEAIPI\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities, Series ID: IEAIPIN\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities, Series ID: IEAIPIA\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities: Debt securities, Series ID: IEAIPID\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities: Debt securities, Series ID: IEAIPIDN\n",
      "Series Name: US Acquisition of Portfolio Investment Assets: Debt securities, Series ID: IEAAPID\n",
      "Series Name: US Acquisition of Portfolio Investment Assets: Debt securities, Series ID: IEAAPIDA\n",
      "Series Name: US Incurrence of Portfolio Investment Liabilities: Debt securities, Series ID: IEAIPIDA\n",
      "Series Name: US Acquisition of Portfolio Investment Assets: Debt securities, Series ID: IEAAPIDN\n",
      "Series Name: AD&Co US Mortgage High Yield Index, Credit-and-Option-Adjusted Spread: Tier 0, Series ID: CROASTIER0\n",
      "Series Name: AD&Co US Mortgage High Yield Index, Credit-and-Option-Adjusted Spread: Tier 1, Series ID: CROASTIER1\n",
      "Series Name: AD&Co US Mortgage High Yield Index: Tier 1, Series ID: CRTINDEXTIER1\n",
      "Series Name: AD&Co US Mortgage High Yield Index, Credit-and-Option-Adjusted Spread: Tier 3, Series ID: CROASTIER3\n",
      "Series Name: AD&Co US Mortgage High Yield Index, Credit-and-Option-Adjusted Spread: Tier 2, Series ID: CROASTIER2\n",
      "Series Name: AD&Co US Mortgage High Yield Index: Tier 0, Series ID: CRTINDEXTIER0\n",
      "Series Name: AD&Co US Mortgage High Yield Index: Tier 3, Series ID: CRTINDEXTIER3\n",
      "Series Name: AD&Co US Mortgage High Yield Index: Tier 2, Series ID: CRTINDEXTIER2\n",
      "Series Name: AD&Co US Mortgage High Yield Index: Mid-Tier, Series ID: CRTINDEXMIDTIER\n",
      "\n",
      "Series for: Reserve Assets\n",
      "Series Name: US Acquisition of Reserve Assets: Monetary gold, Series ID: IEAARM\n",
      "Series Name: US Acquisition of Reserve Assets: Monetary gold, Series ID: IEAARMN\n",
      "Series Name: US Acquisition of Reserve Assets: Monetary gold, Series ID: IEAARMA\n",
      "Series Name: US Acquisition of Reserve Assets: Other reserve assets, Series ID: IEAARON\n",
      "Series Name: US Acquisition of Reserve Assets: Other reserve assets, Series ID: IEAARO\n",
      "Series Name: US Acquisition of Reserve Assets: Reserve position in the International Monetary Fund, Series ID: IEAARIMF\n",
      "Series Name: US Acquisition of Reserve Assets: Reserve position in the International Monetary Fund, Series ID: IEAARIMFN\n",
      "Series Name: US Acquisition of Reserve Assets: Reserve position in the International Monetary Fund, Series ID: IEAARIMFA\n",
      "Series Name: US Acquisition of Reserve Assets, Series ID: IEAAR\n",
      "Series Name: US Acquisition of Reserve Assets, Series ID: IEAARN\n",
      "Series Name: US Acquisition of Reserve Assets, Series ID: IEAARA\n",
      "Series Name: US Acquisition of Other Reserve Assets: Other claims, Series ID: IEAAORO\n",
      "Series Name: US Acquisition of Other Reserve Assets: Other claims, Series ID: IEAAORON\n",
      "Series Name: US Acquisition of Reserve Assets: Special drawing rights, Series ID: IEAARSD\n",
      "Series Name: US Acquisition of Other Reserve Assets: Securities, Series ID: IEAAS\n",
      "Series Name: US Acquisition of Other Reserve Assets: Financial Derivatives, Series ID: IEAAFDN\n",
      "Series Name: US Acquisition of Other Reserve Assets: Financial Derivatives, Series ID: IEAAFD\n",
      "Series Name: US Acquisition of Other Reserve Assets: Financial Derivatives, Series ID: IEAAFDA\n",
      "Series Name: US Acquisition of Other Reserve Assets: Currency and deposits, Series ID: IEAACDN\n",
      "Series Name: US Acquisition of Other Reserve Assets: Currency and deposits, Series ID: IEAACD\n",
      "Series Name: US Acquisition of Reserve Assets: Other reserve assets, Series ID: IEAAROA\n",
      "Series Name: US Acquisition of Other Reserve Assets: Other claims, Series ID: IEAAOROA\n",
      "Series Name: US Acquisition of Reserve Assets: Special drawing rights, Series ID: IEAARSDA\n",
      "Series Name: US Acquisition of Reserve Assets: Special drawing rights, Series ID: IEAARSDN\n",
      "Series Name: US Acquisition of Other Reserve Assets: Securities, Series ID: IEAASA\n",
      "Series Name: US Acquisition of Other Reserve Assets: Securities, Series ID: IEAASN\n",
      "Series Name: US Acquisition of Other Reserve Assets: Currency and deposits, Series ID: IEAACDA\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import urllib.parse\n",
    "\n",
    "def get_series_data(search_text, api_key):\n",
    "   \n",
    "    encoded_search_text = urllib.parse.quote(search_text)\n",
    "    \n",
    "   \n",
    "    search_url = f\"https://api.stlouisfed.org/fred/series/search?search_text={encoded_search_text}&api_key={api_key}&file_type=json\"\n",
    "    response = requests.get(search_url)\n",
    "    \n",
    "  \n",
    "    if response.status_code == 200:\n",
    "        data = response.json()\n",
    "        series_list = data.get(\"seriess\", [])\n",
    "        \n",
    "        # Filtering for US-related series \n",
    "        us_series_list = [series for series in series_list if 'US' in series['title']]\n",
    "\n",
    "        # Creating a list to store series names and ids\n",
    "        series_info = []\n",
    "        \n",
    "        for series in us_series_list:\n",
    "            series_info.append((series['title'], series['id']))\n",
    "        \n",
    "        return series_info\n",
    "    \n",
    "    else:\n",
    "        print(f\"Error: {response.status_code}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "\n",
    "api_key = '0d10f492049f3de481ba7fa08448bf21'\n",
    "\n",
    "\n",
    "search_terms = [\n",
    "    \"Exports of Goods and Services\",\n",
    "    \"Imports of Goods and Services\",\n",
    "    \"Net Exports (Exports - Imports)\",\n",
    "    \"Current Account Balance\",\n",
    "    \"Capital Account Balance\",\n",
    "    \"Financial Account Balance\",\n",
    "    \"Foreign Direct Investment (FDI)\",\n",
    "    \"Portfolio Investment\",\n",
    "    \"Reserve Assets\",\n",
    "    \"Trade Balance\"\n",
    "]\n",
    "\n",
    "\n",
    "all_series_info = {}\n",
    "\n",
    "\n",
    "for term in search_terms:\n",
    "    print(f\"Fetching data for: {term}\")\n",
    "    series_info = get_series_data(term, api_key)\n",
    "    \n",
    "    \n",
    "    if series_info:\n",
    "        all_series_info[term] = series_info\n",
    "\n",
    "\n",
    "for term, series_list in all_series_info.items():\n",
    "    print(f\"\\nSeries for: {term}\")\n",
    "    for series_name, series_id in series_list:\n",
    "        print(f\"Series Name: {series_name}, Series ID: {series_id}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71ffa302-9f81-4fa6-8736-82fff61dca66",
   "metadata": {},
   "source": [
    "# 2. Fetching Data for Specific Series\n",
    "Description\n",
    "In this section, we define a function to fetch time series data for specific series IDs from the FRED API. The function retrieves observations (data points) for each series and organizes them into a structured DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3f5af582-4c05-4773-85b7-982086fa68b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Failed to retrieve data for series ID IEAAPI: 400\n",
      "Failed to retrieve data for series ID IEAAPIA: 400\n",
      "Failed to retrieve data for series ID IEAAPIN: 400\n",
      "Failed to retrieve data for series ID IEAIPIE: 400\n",
      "Failed to retrieve data for series ID IEAIPIEN: 400\n",
      "Failed to retrieve data for series ID IEAAPIE: 400\n",
      "Failed to retrieve data for series ID IEAIPIEA: 400\n",
      "Failed to retrieve data for series ID IEAAPIEA: 400\n",
      "Failed to retrieve data for series ID IEAAPIEN: 400\n",
      "Failed to retrieve data for series ID IEAIPI: 400\n",
      "Failed to retrieve data for series ID IEAIPIN: 400\n",
      "Failed to retrieve data for series ID IEAIPIA: 400\n",
      "Failed to retrieve data for series ID IEAIPID: 400\n",
      "Failed to retrieve data for series ID IEAIPIDN: 400\n",
      "Failed to retrieve data for series ID IEAAPID: 400\n",
      "Failed to retrieve data for series ID IEAAPIDA: 400\n",
      "Failed to retrieve data for series ID IEAIPIDA: 400\n",
      "Failed to retrieve data for series ID IEAAPIDN: 400\n",
      "Failed to retrieve data for series ID IEAARM: 400\n",
      "Failed to retrieve data for series ID IEAARMN: 400\n",
      "Failed to retrieve data for series ID IEAARMA: 400\n",
      "Failed to retrieve data for series ID IEAARON: 400\n",
      "Failed to retrieve data for series ID IEAARO: 400\n",
      "Failed to retrieve data for series ID IEAARIMF: 400\n",
      "Failed to retrieve data for series ID IEAARIMFN: 400\n",
      "Failed to retrieve data for series ID IEAARIMFA: 400\n",
      "Failed to retrieve data for series ID IEAAR: 400\n",
      "Failed to retrieve data for series ID IEAARN: 400\n",
      "Failed to retrieve data for series ID IEAARA: 400\n",
      "Failed to retrieve data for series ID IEAAORO: 400\n",
      "Failed to retrieve data for series ID IEAAORON: 400\n",
      "Failed to retrieve data for series ID IEAARSD: 400\n",
      "Failed to retrieve data for series ID IEAAS: 400\n",
      "Failed to retrieve data for series ID IEAAFDN: 400\n",
      "Failed to retrieve data for series ID IEAAFD: 400\n",
      "Failed to retrieve data for series ID IEAAFDA: 400\n",
      "Failed to retrieve data for series ID IEAACDN: 400\n",
      "Failed to retrieve data for series ID IEAACD: 400\n",
      "Failed to retrieve data for series ID IEAAROA: 400\n",
      "Failed to retrieve data for series ID IEAAOROA: 400\n",
      "Failed to retrieve data for series ID IEAARSDA: 400\n",
      "Failed to retrieve data for series ID IEAARSDN: 400\n",
      "Failed to retrieve data for series ID IEAASA: 400\n",
      "Failed to retrieve data for series ID IEAASN: 400\n",
      "Failed to retrieve data for series ID IEAACDA: 400\n",
      "                               Series_Name        Series_ID        Date  \\\n",
      "0     Portfolio Investment Assets - Tier 1     CROASMIDTIER  2015-06-01   \n",
      "1     Portfolio Investment Assets - Tier 1     CROASMIDTIER  2015-07-01   \n",
      "2     Portfolio Investment Assets - Tier 1     CROASMIDTIER  2015-08-01   \n",
      "3     Portfolio Investment Assets - Tier 1     CROASMIDTIER  2015-09-01   \n",
      "4     Portfolio Investment Assets - Tier 1     CROASMIDTIER  2015-10-01   \n",
      "...                                    ...              ...         ...   \n",
      "1145         Reserve Assets - CRT Mid Tier  CRTINDEXMIDTIER  2024-08-01   \n",
      "1146         Reserve Assets - CRT Mid Tier  CRTINDEXMIDTIER  2024-09-01   \n",
      "1147         Reserve Assets - CRT Mid Tier  CRTINDEXMIDTIER  2024-10-01   \n",
      "1148         Reserve Assets - CRT Mid Tier  CRTINDEXMIDTIER  2024-11-01   \n",
      "1149         Reserve Assets - CRT Mid Tier  CRTINDEXMIDTIER  2024-12-01   \n",
      "\n",
      "                   Value  \n",
      "0      361.5892510206171  \n",
      "1      386.8760420469012  \n",
      "2     404.51701958320035  \n",
      "3     414.19084734916123  \n",
      "4      433.3028977208681  \n",
      "...                  ...  \n",
      "1145  180.78157943367714  \n",
      "1146  182.13935495754512  \n",
      "1147  183.21232587868994  \n",
      "1148  184.66596445711332  \n",
      "1149  186.06616856100086  \n",
      "\n",
      "[1150 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "\n",
    "\n",
    "api_key = \"0d10f492049f3de481ba7fa08448bf21\"\n",
    "file_type = \"json\"\n",
    "observation_start = \"2000-01-01\"\n",
    "observation_end = \"2024-12-31\"\n",
    "limit = 1000\n",
    "frequency = \"m\"  # monthly data\n",
    "sort_order = \"asc\"\n",
    "\n",
    "\n",
    "portfolio_investment_assets_series_ids = [\n",
    "    \"IEAAPI\", \"IEAAPIA\", \"IEAAPIN\", \"CROASMIDTIER\", \"IEAIPIE\", \"IEAIPIEN\", \"IEAAPIE\", \"IEAIPIEA\", \n",
    "    \"IEAAPIEA\", \"IEAAPIEN\", \"IEAIPI\", \"IEAIPIN\", \"IEAIPIA\", \"IEAIPID\", \"IEAIPIDN\", \"IEAAPID\", \n",
    "    \"IEAAPIDA\", \"IEAIPIDA\", \"IEAAPIDN\", \"CROASTIER0\", \"CROASTIER1\", \"CRTINDEXTIER1\", \"CROASTIER3\", \n",
    "    \"CROASTIER2\", \"CRTINDEXTIER0\", \"CRTINDEXTIER3\", \"CRTINDEXTIER2\", \"CRTINDEXMIDTIER\"\n",
    "]\n",
    "\n",
    "reserve_assets_series_ids = [\n",
    "    \"IEAARM\", \"IEAARMN\", \"IEAARMA\", \"IEAARON\", \"IEAARO\", \"IEAARIMF\", \"IEAARIMFN\", \"IEAARIMFA\", \n",
    "    \"IEAAR\", \"IEAARN\", \"IEAARA\", \"IEAAORO\", \"IEAAORON\", \"IEAARSD\", \"IEAAS\", \"IEAAFDN\", \"IEAAFD\", \n",
    "    \"IEAAFDA\", \"IEAACDN\", \"IEAACD\", \"IEAAROA\", \"IEAAOROA\", \"IEAARSDA\", \"IEAARSDN\", \"IEAASA\", \n",
    "    \"IEAASN\", \"IEAACDA\"\n",
    "]\n",
    "\n",
    "series_id_to_name = {\n",
    "    \"IEAAPI\": \"Portfolio Investment Assets\",\n",
    "    \"IEAAPIA\": \"Portfolio Investment Assets - A\",\n",
    "    \"IEAAPIN\": \"Portfolio Investment Assets - N\",\n",
    "    \"CROASMIDTIER\": \"Portfolio Investment Assets - Tier 1\",\n",
    "    \"IEAIPIE\": \"Portfolio Investment Assets - PIE\",\n",
    "    \"IEAIPIEN\": \"Portfolio Investment Assets - PIE N\",\n",
    "    \"IEAAPIE\": \"Portfolio Investment Assets - PIE All\",\n",
    "    \"IEAIPIEA\": \"Portfolio Investment Assets - PIE A\",\n",
    "    \"IEAAPIEA\": \"Portfolio Investment Assets - PIE A All\",\n",
    "    \"IEAAPIEN\": \"Portfolio Investment Assets - PIE EN\",\n",
    "    \"IEAIPI\": \"Portfolio Investment Assets - PI\",\n",
    "    \"IEAIPIN\": \"Portfolio Investment Assets - PIN\",\n",
    "    \"IEAIPIA\": \"Portfolio Investment Assets - PIA\",\n",
    "    \"IEAIPID\": \"Portfolio Investment Assets - PID\",\n",
    "    \"IEAIPIDN\": \"Portfolio Investment Assets - PIDN\",\n",
    "    \"IEAAPID\": \"Portfolio Investment Assets - AID\",\n",
    "    \"IEAAPIDA\": \"Portfolio Investment Assets - AIDA\",\n",
    "    \"IEAIPIDA\": \"Portfolio Investment Assets - PIDA\",\n",
    "    \"IEAAPIDN\": \"Portfolio Investment Assets - AIDN\",\n",
    "    \"CROASTIER0\": \"Reserve Assets - Tier 0\",\n",
    "    \"CROASTIER1\": \"Reserve Assets - Tier 1\",\n",
    "    \"CRTINDEXTIER1\": \"Reserve Assets - CRT Tier 1\",\n",
    "    \"CROASTIER3\": \"Reserve Assets - Tier 3\",\n",
    "    \"CROASTIER2\": \"Reserve Assets - Tier 2\",\n",
    "    \"CRTINDEXTIER0\": \"Reserve Assets - CRT Tier 0\",\n",
    "    \"CRTINDEXTIER3\": \"Reserve Assets - CRT Tier 3\",\n",
    "    \"CRTINDEXTIER2\": \"Reserve Assets - CRT Tier 2\",\n",
    "    \"CRTINDEXMIDTIER\": \"Reserve Assets - CRT Mid Tier\",\n",
    "    \"IEAARM\": \"Reserve Assets - ARM\",\n",
    "    \"IEAARMN\": \"Reserve Assets - ARM N\",\n",
    "    \"IEAARMA\": \"Reserve Assets - ARMA\",\n",
    "    \"IEAARON\": \"Reserve Assets - ARON\",\n",
    "    \"IEAARO\": \"Reserve Assets - ARO\",\n",
    "    \"IEAARIMF\": \"Reserve Assets - ARIMF\",\n",
    "    \"IEAARIMFN\": \"Reserve Assets - ARIMFN\",\n",
    "    \"IEAARIMFA\": \"Reserve Assets - ARIMFA\",\n",
    "    \"IEAAR\": \"Reserve Assets - AR\",\n",
    "    \"IEAARN\": \"Reserve Assets - ARN\",\n",
    "    \"IEAARA\": \"Reserve Assets - ARA\",\n",
    "    \"IEAAORO\": \"Reserve Assets - AORO\",\n",
    "    \"IEAAORON\": \"Reserve Assets - AORON\",\n",
    "    \"IEAARSD\": \"Reserve Assets - ARSD\",\n",
    "    \"IEAAS\": \"Reserve Assets - AS\",\n",
    "    \"IEAAFDN\": \"Reserve Assets - AFDN\",\n",
    "    \"IEAAFD\": \"Reserve Assets - AFD\",\n",
    "    \"IEAAFDA\": \"Reserve Assets - AFDA\",\n",
    "    \"IEAACDN\": \"Reserve Assets - AACDN\",\n",
    "    \"IEAACD\": \"Reserve Assets - AACD\",\n",
    "    \"IEAAROA\": \"Reserve Assets - AROA\",\n",
    "    \"IEAAOROA\": \"Reserve Assets - AOROA\",\n",
    "    \"IEAARSDA\": \"Reserve Assets - ARSDA\",\n",
    "    \"IEAARSDN\": \"Reserve Assets - ARSDN\",\n",
    "    \"IEAASA\": \"Reserve Assets - ASA\",\n",
    "    \"IEAASN\": \"Reserve Assets - ASN\",\n",
    "    \"IEAACDA\": \"Reserve Assets - AACDA\"\n",
    "}\n",
    "\n",
    "# Function to fetch data \n",
    "def fetch_data_for_series(series_id):\n",
    "    url = f\"https://api.stlouisfed.org/fred/series/observations?series_id={series_id}&api_key={api_key}&file_type={file_type}&observation_start={observation_start}&observation_end={observation_end}&limit={limit}&frequency={frequency}&sort_order={sort_order}\"\n",
    "    \n",
    "    response = requests.get(url)\n",
    "\n",
    "    if response.status_code == 200:\n",
    "        data = response.json()\n",
    "        observations = data.get(\"observations\", [])\n",
    "        \n",
    "       \n",
    "        data_list = []\n",
    "        for obs in observations:\n",
    "            series_name = series_id_to_name.get(series_id, \"Unknown Series\")  # Get the series name\n",
    "            data_list.append({\n",
    "                \"Series_Name\": series_name,\n",
    "                \"Series_ID\": series_id,\n",
    "                \"Date\": obs[\"date\"],\n",
    "                \"Value\": obs[\"value\"]\n",
    "            })\n",
    "        \n",
    "        # Convert to DataFrame\n",
    "        df = pd.DataFrame(data_list)\n",
    "        return df\n",
    "    else:\n",
    "        print(f\"Failed to retrieve data for series ID {series_id}: {response.status_code}\")\n",
    "        return pd.DataFrame()\n",
    "\n",
    "\n",
    "dfs = []\n",
    "for series_id in portfolio_investment_assets_series_ids + reserve_assets_series_ids:\n",
    "    df = fetch_data_for_series(series_id)\n",
    "    if not df.empty:\n",
    "        dfs.append(df)\n",
    "\n",
    "\n",
    "final_df = pd.concat(dfs, ignore_index=True)\n",
    "\n",
    "\n",
    "print(final_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62ad98b9-c359-40de-804d-149b194e01f3",
   "metadata": {},
   "source": [
    "# 4. Storing Data in PostgreSQL\n",
    "Description\n",
    "In this section, we store the combined DataFrame (final_df) into a PostgreSQL database. We use the sqlalchemy library to connect to the database and insert the data into a table.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f0ce9342-07aa-4892-bf75-e39c6ac7d1b6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sqlalchemy in /opt/conda/lib/python3.9/site-packages (1.4.41)\n",
      "Requirement already satisfied: psycopg2 in /opt/conda/lib/python3.9/site-packages (2.9.9)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.9/site-packages (from sqlalchemy) (1.1.3)\n",
      "DataFrame successfully inserted into table 'FRED_DATA'.\n"
     ]
    }
   ],
   "source": [
    "# storing final df to postgres\n",
    "\n",
    "!pip install sqlalchemy psycopg2\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "db_config = {\n",
    "    'dbname': 'pg4e_96c46dbe33',  \n",
    "    'user': 'pg4e_96c46dbe33',         \n",
    "    'password': 'pg4e_p_4984e3e88e36654',     \n",
    "    'host': 'pg.pg4e.com',             \n",
    "    'port': '5432'              \n",
    "}\n",
    "\n",
    "\n",
    "connection_string = f\"postgresql+psycopg2://{db_config['user']}:{db_config['password']}@{db_config['host']}:{db_config['port']}/{db_config['dbname']}\"\n",
    "\n",
    "\n",
    "engine = create_engine(connection_string)\n",
    "\n",
    "\n",
    "table_name = 'FRED_DATA'  \n",
    "final_df.to_sql(table_name, engine, if_exists='replace', index=False)\n",
    "\n",
    "print(f\"DataFrame successfully inserted into table '{table_name}'.\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13b7c8bf-6d1c-4991-939b-70be7adbbc8b",
   "metadata": {},
   "source": [
    "# 5. Time Series Analysis and Forecasting\n",
    "Description\n",
    "In this section, we perform time series analysis and forecasting on the portfolio investment assets data. We use both ARIMA and Prophet models to forecast future values and evaluate their performance.\n",
    "I chose to look at Portfolio Investment Assets which has the series id:'CROASMIDTIER'.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcdcf457-0fa7-4106-9002-bbbed438ede6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: prophet in /opt/conda/lib/python3.9/site-packages (1.1.6)\n",
      "Requirement already satisfied: cmdstanpy>=1.0.4 in /opt/conda/lib/python3.9/site-packages (from prophet) (1.2.5)\n",
      "Requirement already satisfied: numpy>=1.15.4 in /opt/conda/lib/python3.9/site-packages (from prophet) (1.23.3)\n",
      "Requirement already satisfied: matplotlib>=2.0.0 in /opt/conda/lib/python3.9/site-packages (from prophet) (3.6.0)\n",
      "Requirement already satisfied: pandas>=1.0.4 in /opt/conda/lib/python3.9/site-packages (from prophet) (1.5.0)\n",
      "Requirement already satisfied: holidays<1,>=0.25 in /opt/conda/lib/python3.9/site-packages (from prophet) (0.65)\n",
      "Requirement already satisfied: tqdm>=4.36.1 in /opt/conda/lib/python3.9/site-packages (from prophet) (4.64.1)\n",
      "Requirement already satisfied: importlib-resources in /opt/conda/lib/python3.9/site-packages (from prophet) (5.10.0)\n",
      "Requirement already satisfied: stanio<2.0.0,>=0.4.0 in /opt/conda/lib/python3.9/site-packages (from cmdstanpy>=1.0.4->prophet) (0.5.1)\n",
      "Requirement already satisfied: python-dateutil in /opt/conda/lib/python3.9/site-packages (from holidays<1,>=0.25->prophet) (2.8.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (1.0.5)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (4.37.4)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (1.4.4)\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (24.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (8.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.0.0->prophet) (3.0.9)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.9/site-packages (from pandas>=1.0.4->prophet) (2022.4)\n",
      "Requirement already satisfied: zipp>=3.1.0 in /opt/conda/lib/python3.9/site-packages (from importlib-resources->prophet) (3.9.0)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.9/site-packages (from python-dateutil->holidays<1,>=0.25->prophet) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install prophet\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from statsmodels.tsa.seasonal import seasonal_decompose\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error\n",
    "from prophet import Prophet\n",
    "\n",
    "\n",
    "\n",
    "final_df['Date'] = pd.to_datetime(final_df['Date'])\n",
    "\n",
    "\n",
    "final_df.set_index('Date', inplace=True)\n",
    "\n",
    "\n",
    "portfolio_df = final_df[final_df['Series_ID'] == 'CROASMIDTIER']  \n",
    "\n",
    "\n",
    "portfolio_df = portfolio_df.resample('M').mean()\n",
    "\n",
    "portfolio_df.fillna(method='ffill', inplace=True)\n",
    "\n",
    "portfolio_df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58ca7c20-7ff6-48d8-953a-99bcf4858bb5",
   "metadata": {},
   "source": [
    "# 6. Exploratory Data Analysis (EDA)\n",
    "Description\n",
    "In this section, we visualize the time series data and decompose it into trend, seasonal, and residual components to understand its structure.\n",
    "\n",
    "Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f860be8-82ff-4c9d-af55-bbdd5606296b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(portfolio_df['Value'])\n",
    "plt.title('Portfolio Investment Assets Time Series')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.show()\n",
    "\n",
    "# Decompose the time series into trend, seasonal, and residual components\n",
    "decomposition = seasonal_decompose(portfolio_df['Value'], model='multiplicative')\n",
    "\n",
    "\n",
    "decomposition.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ef57aa0-3f79-4aea-8e9e-b013d5894492",
   "metadata": {},
   "source": [
    "# 7 ARIMA Model & Prophet model for time series forecasting. \n",
    "ARIMA Model:\n",
    "- Description\n",
    "    - In this section, we build and evaluate an ARIMA model for time series forecasting. Key steps include:\n",
    "\n",
    "    - Splitting the data into training and test sets.\n",
    "\n",
    "    - Fitting an ARIMA model with specified parameters (p, d, q).\n",
    "\n",
    "    - Making predictions on the test set.\n",
    "\n",
    "    - Evaluating the model using Mean Absolute Percentage Error (MAPE) and Root Mean Squared Error (RMSE).\n",
    "Prophet Model:\n",
    "- Description\n",
    "    - Preparing the data for Prophet (renaming columns to ds and y).\n",
    "\n",
    "    - Splitting the data into training and test sets.\n",
    "\n",
    "    - Fitting a Prophet model.\n",
    "\n",
    "    - Making predictions on the test set.\n",
    "\n",
    "    - Evaluating the model using MAPE and RMSE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13ff405a-1fc0-4ca5-845f-3f845b53f475",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_size = int(len(portfolio_df) * 0.8)\n",
    "train_arima, test_arima = portfolio_df[:train_size], portfolio_df[train_size:]\n",
    "\n",
    "# Fit an ARIMA model (adjust p, d, q as needed)\n",
    "arima_model = ARIMA(train_arima['Value'], order=(5, 1, 0))  # Example parameters\n",
    "arima_model_fit = arima_model.fit()\n",
    "\n",
    "# Make predictions on the test set\n",
    "arima_predictions = arima_model_fit.forecast(steps=len(test_arima))\n",
    "\n",
    "# Evaluate the model using MAPE and RMSE\n",
    "mape_arima = mean_absolute_percentage_error(test_arima['Value'], arima_predictions)\n",
    "rmse_arima = mean_squared_error(test_arima['Value'], arima_predictions, squared=False)\n",
    "\n",
    "print(f'ARIMA Model - MAPE: {mape_arima}')\n",
    "print(f'ARIMA Model - RMSE: {rmse_arima}')\n",
    "\n",
    "# Prophet Section\n",
    "# Prepare the data for Prophet \n",
    "prophet_df = portfolio_df.reset_index()[['Date', 'Value']]\n",
    "prophet_df.columns = ['ds', 'y']\n",
    "\n",
    "# Split into training and test sets \n",
    "train_size = int(len(prophet_df) * 0.8)\n",
    "train_prophet = prophet_df[:train_size]\n",
    "test_prophet = prophet_df[train_size:]\n",
    "\n",
    "# Initialize and fit the Prophet model\n",
    "prophet_model = Prophet()\n",
    "prophet_model.fit(train_prophet)\n",
    "\n",
    "# Create a future dataframe for forecasting \n",
    "future = prophet_model.make_future_dataframe(periods=len(test_prophet), freq='M')\n",
    "\n",
    "# Generate the forecast\n",
    "forecast = prophet_model.predict(future)\n",
    "\n",
    "# Evaluate the Prophet model by comparing actual vs forecasted values\n",
    "prophet_predictions = forecast['yhat'][-len(test_prophet):].values\n",
    "\n",
    "# Evaluate using MAPE and RMSE\n",
    "mape_prophet = mean_absolute_percentage_error(test_prophet['y'], prophet_predictions)\n",
    "rmse_prophet = mean_squared_error(test_prophet['y'], prophet_predictions, squared=False)\n",
    "\n",
    "# Print the results\n",
    "print(f'Prophet Model - MAPE: {mape_prophet}')\n",
    "print(f'Prophet Model - RMSE: {rmse_prophet}')\n",
    "\n",
    "# Plotting Section\n",
    "# Plot Actual vs Predicted (ARIMA)\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(train_arima.index, train_arima['Value'], label='Train')\n",
    "plt.plot(test_arima.index, test_arima['Value'], label='Actual Test')\n",
    "plt.plot(test_arima.index, arima_predictions, label='ARIMA Predictions', linestyle='--')\n",
    "plt.title('ARIMA Model - Actual vs Predicted')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Plot Actual vs Predicted (Prophet)\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(train_prophet['ds'], train_prophet['y'], label='Train')\n",
    "plt.plot(test_prophet['ds'], test_prophet['y'], label='Actual Test')\n",
    "plt.plot(test_prophet['ds'], prophet_predictions, label='Prophet Predictions', linestyle='--')\n",
    "plt.title('Prophet Model - Actual vs Predicted')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Value')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Plot the forecasted values from Prophet\n",
    "prophet_model.plot(forecast)\n",
    "plt.title('Prophet Model Forecast')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61b577cc-b480-4de4-bdbd-e095e3e44665",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "The ARIMA model outperformed the Prophet model in terms of both accuracy and predictive performance. Specifically, the ARIMA model achieved a MAPE of 31.33% and RMSE of 111.61, indicating it made more accurate forecasts with lower error. In comparison, the Prophet model had a MAPE of 38.39% and RMSE of 155.72, which suggests its predictions were less accurate. Overall, ARIMA provided more reliable results for forecasting future portfolio investment and reserve assets.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6e25be5-57af-42b1-b351-4014d1179ebe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
